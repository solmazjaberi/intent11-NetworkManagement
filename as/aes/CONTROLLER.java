package generatedbyassl.as.aes;

import java.io.Serializable;
import generatedbyassl.as.ASSLAE;
import generatedbyassl.as.aes.controller.controlloop.*;

/**
 * Generated by ASSL Framework
 * 
 * This is the Java class generated for 'Controller' (specified as AE ASSL tier).
 */
public class CONTROLLER
	extends ASSLAE
	implements  Serializable
{

	/**
	 * Generated by ASSL Framework
	 * 
	 * This is a reference to the unique instance of 'CONTROLLER' class.
	 */
	static private CONTROLLER oInstance = null;
	/**
	 * Generated by ASSL Framework
	 * 
	 * Needed by the class because it implements the Serializable interface.
	 */
	static final long serialVersionUID = 0001L;
	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds a reference to the AE control loop's monitor.
	 */
	private CONTROLLER_ASSLMONITOR oMonitor = new CONTROLLER_ASSLMONITOR();
	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds a reference to the AE control loop's analyzer.
	 */
	private CONTROLLER_ASSLANALYZER oAnalyzer = new CONTROLLER_ASSLANALYZER();
	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds a reference to the AE control loop's simulator.
	 */
	private CONTROLLER_ASSLSIMULATOR oSimulator = new CONTROLLER_ASSLSIMULATOR();
	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds a reference to the AE control loop's executor.
	 */
	private CONTROLLER_ASSLEXECUTOR oExecutor = new CONTROLLER_ASSLEXECUTOR();
	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds a reference to the FRIENDS class.
	 */
	public generatedbyassl.as.aes.controller.FRIENDS FRIENDS = generatedbyassl.as.aes.controller.FRIENDS.getInstance();
	/**
	 * Generated by ASSL Framework
	 * 
	 * Holds a reference to the AEIP class.
	 */
	public generatedbyassl.as.aes.controller.AEIP AEIP = generatedbyassl.as.aes.controller.AEIP.getInstance();

	/**
	 * Generated by ASSL Framework
	 * 
	 * Because this is a singleton class its constructor is private.
	 */
	private  CONTROLLER (  )
	{
		vPolicies.put( "SELF_CONFIGURING", generatedbyassl.as.aes.controller.aeself_management.SELF_CONFIGURING.getInstance() );
		vPolicies.put( "SELF_HEALING", generatedbyassl.as.aes.controller.aeself_management.SELF_HEALING.getInstance() );
		vPolicies.put( "SELF_SECHEDULING", generatedbyassl.as.aes.controller.aeself_management.SELF_SECHEDULING.getInstance() );
		ACTIONS.put( "ALLOCATERESOURCES", generatedbyassl.as.aes.controller.actions.ALLOCATERESOURCES.getInstance() );
		ACTIONS.put( "ALLOCATION", generatedbyassl.as.aes.controller.actions.ALLOCATION.getInstance() );
		ACTIONS.put( "STARTBOOTING", generatedbyassl.as.aes.controller.actions.STARTBOOTING.getInstance() );
		ACTIONS.put( "BOOT", generatedbyassl.as.aes.controller.actions.BOOT.getInstance() );
		ACTIONS.put( "RUNINSTANCES", generatedbyassl.as.aes.controller.actions.RUNINSTANCES.getInstance() );
		ACTIONS.put( "REPAIR", generatedbyassl.as.aes.controller.actions.REPAIR.getInstance() );
		ACTIONS.put( "RECORDLIFECYCLE", generatedbyassl.as.aes.controller.actions.RECORDLIFECYCLE.getInstance() );
		EVENTS.put( "TIMETOSTARTLIFECYCLE", generatedbyassl.as.aes.controller.events.TIMETOSTARTLIFECYCLE.getInstance() );
		EVENTS.put( "PROVISIONINGDONE", generatedbyassl.as.aes.controller.events.PROVISIONINGDONE.getInstance() );
		EVENTS.put( "STAGINGDONE", generatedbyassl.as.aes.controller.events.STAGINGDONE.getInstance() );
		EVENTS.put( "RUNNINGDONE", generatedbyassl.as.aes.controller.events.RUNNINGDONE.getInstance() );
		EVENTS.put( "RUNNINGSTATES", generatedbyassl.as.aes.controller.events.RUNNINGSTATES.getInstance() );
		EVENTS.put( "REPAIRINGDONE", generatedbyassl.as.aes.controller.events.REPAIRINGDONE.getInstance() );
		EVENTS.put( "TIMETORECORDLIFECYCLE", generatedbyassl.as.aes.controller.events.TIMETORECORDLIFECYCLE.getInstance() );
		EVENTS.put( "LIFECYCLERECORDED", generatedbyassl.as.aes.controller.events.LIFECYCLERECORDED.getInstance() );
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * This method returns the unique instance of 'CONTROLLER' class.
	 */
	static public CONTROLLER getInstance (  )
	{
		if ( null == oInstance ) 
		{
			oInstance = new CONTROLLER();
		}
		return oInstance;
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Sets the control loop components.
	 */
	protected void setControlLoop (  )
	{
		//**** This method overrides the super class's method.
		//****************************************************
		oMonitor.setMonitoredSLO(AESLO);
		oMonitor.setMonitoredMetrics(METRICS);
		oMonitor.setAnalyzer(oAnalyzer);
		oAnalyzer.setSimulator(oSimulator);
		oAnalyzer.setExecutor(oExecutor);
		oSimulator.setExecutor(oExecutor);
	}

	/**
	 * Generated by ASSL Framework
	 * 
	 * Performs the AE control loop.
	 */
	protected void controlLoop (  )
	{
		//**** This method overrides the super class's method.
		//****************************************************
		try
		{
			//**** control loops should not be very resource-consuming, thus it releases CPU for a while
			Thread.sleep(1000);
		}
		catch ( InterruptedException ex ) 
		{
			System.err.println( ex.getMessage() );
		}
		//**** performs AE control loop monitor-analyzer-simulator-executor
		oMonitor.perform();
		oAnalyzer.perform();
		oSimulator.perform();
		oExecutor.perform();
		//**** applies all the "switched-on" self-management policies for the AS
		applayPolicies();
	}

}